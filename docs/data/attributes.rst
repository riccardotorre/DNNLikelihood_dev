Attributes
""""""""""

.. currentmodule:: DNNLikelihood

.. py:attribute:: Data.data_dictionary

    Dictionary used by the :class:`DnnLik <DNNLikelihood.DnnLik>` and 
    :class:`DnnLikEnsemble <DNNLikelihood.DnnLikEnsemble>` objects to keep track and store on the RAM
    the generated train/validation/test data (used, for instance, when training the DNNLikelihood and in making predictions).
    The dictionary is updated each time data are generated or updated and is not stored when saving the object (data
    indices only are stored with trained models by the :class:`DnnLik <DNNLikelihood.DnnLik>` and 
    :class:`DnnLikEnsemble <DNNLikelihood.DnnLikEnsemble>` objects).
    See the :mod:`DNNLikelihood <dnn_likelihood>` object and 
    the :mod:`DNNLikEnsemble <dnn_likelihood_ensemble>` object objects for more
    information.

        - **type**: ``dict`` with the following structure:

            - *"X_train"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current training dataset X points.
            - *"Y_train"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current training dataset Y points.
            - *"X_val"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current validation dataset X points.
            - *"Y_val"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current validation dataset Y points.
            - *"X_test"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current test dataset X points.
            - *"Y_test"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current test dataset Y points.
            - *"idx_train"* (value type: ``numpy.ndarray`` with dtype ``int32``)
               |Numpy_link| array with the indices of the training points inside :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`.
            - *"idx_val"* (value type: ``numpy.ndarray`` with dtype ``int32``)
               |Numpy_link| array with the indices of the validation points inside :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`.
            - *"idx_test"* (value type: ``numpy.ndarray`` with dtype ``int32``)
               |Numpy_link| array with the indices of the test points inside :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`.

.. py:attribute:: Data.data_X

    Attribute corresponding to the input argument :argument:`data_X` and
    containing a |numpy_link| array with the X data points.

        - **type**: ``numpy.ndarray``
        - **default**: ``(npoints,ndim)``

.. py:attribute:: Data.data_Y

    Attribute corresponding to the input argument :argument:`data_X` and
    containing a |numpy_link| array with the x data points.

        - **type**: ``numpy.ndarray``
        - **default**: ``(npoints,ndim)``

.. py:attribute:: Data.dtype_required

    Required data type for the generation of the train/validation/test datasets. The attribute is always set to
    the value of the :argument:`dtype` input argument if not ``None`` and to ``"float64"`` if ``None``.
    It represents the data type of the data stored in the attribute 
    :attr:`Data.data_dictionary <DNNLikelihood.Data.data_dictionary>`.

        - **type**: ``str``
 
.. py:attribute:: Data.dtype_stored

    Data type of the dataset stored in the :attr:`Data.output_h5_file <DNNLikelihood.Data.output_h5_file>`.
    It is set to the value of the :argument:`dtype` input argument if not ``None`` and to ``"float64"`` if ``None`` 
    the first time the object is created and remains unchanged when saving/loading the 
    :mod:`Data <data>` object.

        - **type**: ``str``

.. py:attribute:: Data.pars_labels_auto

    List containing parameters names automatically generated by the function
    :func:`utils.define_pars_labels_auto <DNNLikelihood.utils.define_pars_labels_auto>`.
    All parameters of interest are named ``r"$\theta_{i}$"`` with ``i`` ranging between
    one to the number of parameters of interest and all nuisance parameters are named
    ``r"$\nu_{j}$"`` with ``j`` ranging between one to the number of nuisance parameters.
    Parameters labels are always used as "raw" strings (like, for instance, ``r"%s"%pars_labels_auto[0]``) 
    and can contain latex expressions that are properly compiled when making plots.

        - **type**: ``list``
        - **shape**: ``(ndims,)``

.. py:attribute:: Data.input_file

    See :attr:`input_file <common_classes_attributes.input_file>`.

.. py:attribute:: Data.input_folder

    See :attr:`input_folder <common_classes_attributes.input_folder>`.

.. py:attribute:: Data.input_h5_file

   See :attr:`input_h5_file <common_classes_attributes.input_h5_file>`.

.. py:attribute:: Data.input_log_file

   See :attr:`input_log_file <common_classes_attributes.input_log_file>`.

.. py:attribute:: Data.input_samples_h5_file

    Absolute path to the .h5 file containing saved :class:`Data <DNNLikelihood.Data>`
    samples corresponding to the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>` 
    attribures (see the :meth:`Data.save_samples_h5 <DNNLikelihood.Data.save_samples_h5>`
    method for details).
    It is automatically generated from the attribute
    :attr:`Data.input_file <DNNLikelihood.Data.input_file>`.
    When the latter is ``None``, the attribute is set to ``None``.
         
        - **type**: ``str`` or ``None``

.. py:attribute:: Data.load_on_RAM

    Attribute corresponding to the input argument :argument:`load_on_RAM`.
    If ``True`` all data available in the HDF5 dataset :attr:`Dara.input_h5_file <DNNLikelihood.Data.input_h5_file>`
    are loaded into the RAM for faster generation of train/validation/test data. 
    If ``False`` the HDF5 file is open in read mode and train/validation/test data are generated on demand.
          
       - **type**: ``str`` or ``None``

.. py:attribute:: Data.log

   See :attr:`log <common_classes_attributes.log>`.

.. py:attribute:: Data.name

   See :attr:`name <common_classes_attributes.name>`.

.. py:attribute:: Data.ndims

    See :attr:`ndims <common_classes_attributes.ndims>`.

.. py:attribute:: Data.npoints

    Number of X/Y data. It is automatically set to the length of
    the the input argument :argument:`data_X`.

        - **type**: ``int``

.. py:attribute:: Data.opened_dataset

    Opened HDF5 dataset. When importing data with the :attr:`Data.load_on_RAM <DNNLikelihood.Data.load_on_RAM>` 
    attribute set to ``False`` the HDF5 dataset is kept open until it is manually close with the
    :meth:`Data.close_opened_dataset <DNNLikelihood.Data.close_opened_dataset>` method.

        - **type**: ``HDF5 file`` object

.. py:attribute:: Data.output_figures_base_file_name

   See :attr:`output_figures_base_file_name <common_classes_attributes.output_figures_base_file_name>`.

.. py:attribute:: Data.output_figures_base_file_path

   See :attr:`output_figures_base_file_path <common_classes_attributes.output_figures_base_file_path>`.

.. py:attribute:: Data.output_figures_folder

   See :attr:`output_figures_folder <common_classes_attributes.output_figures_folder>`.

.. py:attribute:: Data.output_folder

   See :attr:`output_folder <common_classes_attributes.output_folder>`.

.. py:attribute:: Data.output_h5_file

   See :attr:`output_h5_file <common_classes_attributes.output_h5_file>`.

.. py:attribute:: Data.output_json_file

   See :attr:`output_json_file <common_classes_attributes.output_json_file>`.

.. py:attribute:: Data.output_log_file

   See :attr:`output_log_file <common_classes_attributes.output_log_file>`.

.. py:attribute:: Data.output_predictions_json_file

   See :attr:`output_predictions_json_file <common_classes_attributes.output_predictions_json_file>`.

.. py:attribute:: Data.output_samples_h5_file

    Absolute path to the .h5 file where the :class:`Data <DNNLikelihood.Data>` 
    samples corresponding to the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>` 
    attribures are saved (see the :meth:`Data.save_samples_h5 <DNNLikelihood.Data.save_samples_h5>`
    method for details).
    It is automatically generated from the attribute
    :attr:`Histfactory.output_folder <DNNLikelihood.Histfactory.output_folder>`.
         
        - **type**: ``str`` 

.. py:attribute:: Data.pars_bounds

    See :attr:`pars_bounds <common_classes_attributes.pars_bounds>`.

.. py:attribute:: Data.pars_central   

    See :attr:`pars_central <common_classes_attributes.pars_central>`.

.. py:attribute:: Data.pars_labels

    See :attr:`pars_labels <common_classes_attributes.pars_labels>`.

.. py:attribute:: Data.pars_labels_auto   

    See :attr:`pars_labels_auto <common_classes_attributes.pars_labels_auto>`.

.. py:attribute:: Data.pars_pos_nuis   

    See :attr:`pars_pos_nuis <common_classes_attributes.pars_pos_nuis>`.

.. py:attribute:: Data.pars_pos_poi   

    See :attr:`pars_pos_poi <common_classes_attributes.pars_pos_poi>`.

.. py:attribute:: Data.predictions

   Nested dictionary containing all predictions and list of figures generated by the
   :meth:`Data.plot_corners_1samp <DNNLikelihood.Data.plot_corners_1samp>` method.

       - **type**: ``dict``

      - **schematic example**:

         .. code-block:: python

            {'Figures': {'timestamp1': [str, ...],
                         'timestamp2': [str, ...],
                         ...}

.. py:attribute:: Data.test_fraction

    Attribute corresponding to the input argument :argument:`test_fraction`.
    It specifies the fraction of data that is used as test set. The first ``(1-test_fraction)`` fraction
    of points will be used to generate train and validation data while the remaining ``test_fraction``
    to generate test data.

.. py:attribute:: Data.test_range

    Attribute set from the :attr:`Data.test_fraction <DNNLikelihood.Data.test_fraction>`
    attribute and containing the range of test data indices in the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`
    |numpy_link| arrays.

.. py:attribute:: Data.train_range

    Attribute set from the :attr:`Data.test_fraction <DNNLikelihood.Data.test_fraction>`
    attribute and containing the range of train/validation data indices in the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`
    |numpy_link| arrays.

.. py:attribute:: Data.verbose

    See :attr:`verbose <common_classes_attributes.verbose>`.

.. include:: ../external_links.rst