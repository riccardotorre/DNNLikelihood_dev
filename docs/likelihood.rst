The Likelihood object
----------------------

Summary
^^^^^^^

The likelihood class acts as a container for the original likelihood function. It contains information on parameters,
parameters initializations, information on likelihood maxima and the logpdf function. In case in which the likelihood
is obtained using the histfactory interface, the logpdf is constructed from the pyhf.Workspace.model.logpdf method.

Usage
^^^^^

Describe the usage of the ``logpdf_fn`` method and the need of the ``generate_define_logpdf_file`` one.

Class
^^^^^

.. autoclass:: DNNLikelihood.Likelihood
   :undoc-members:

Arguments
"""""""""

    .. py:attribute:: DNNLikelihood.Likelihood.name   

            Name of the :class:`Likelihood <DNNLikelihood.Likelihood>` object. It is used to generate 
            output files. If ``None`` is passed ``name``` is assigned the value
            ``"model_" + datetime.now().strftime("%Y-%m-%d-%H-%M-%S")+"_likelihood"``, 
            while if a string is passed, the ``"_likelihood"`` suffix is appended 
            (preventing duplication if it is already present).
            
                - **type**: ``str`` or ``None``
                - **default**: ``None``

    .. py:attribute:: DNNLikelihood.Likelihood.logpdf

            Callable function that could accept either a single point in parameter space corresponding 
            to an array with shape ``(n_pars,)``) or a list of points corresponding to an array with 
            shape ``(n_points,n_pars)`` and that returns either a ``float`` or a list of computed logpdf values,
            depending on the input.
            The function could also accept additional arguments ``args``, passed through the ``logpdf_args`` argument.
            It should be passed as a callable function without arguments.
            This function is used to construct the method :meth:`Likelihood.logpdf_fn <DNNLikelihood.Likelihood.logpdf_fn>`.
                
                - **type**: ``callable`` or ``None``
                - **default**: ``None`` 

            - **Could accept**

                - **x_pars**
                    
                    It could be a single point in parameter space corresponding to an array with shape ``(n_pars,)``) 
                    or a list of points corresponding to an array with shape ``(n_points,n_pars)``, depending on the 
                    definition of ``Likelihood.logpdf``.
                    Values of the parameters for which logpdf is computed.
                        
                        - **type**: ``numpy.ndarray``
                        - **possible shapes**: ``(n_pars,)`` or ``(n_points,n_pars)``

                - **args**

                    List containing additional arguments required 
                    by the ``Likelihood.logpdf``. 
                        
                        - **type**: ``list`` or None
                        - **shape of list**: ``[ ]``
            
            - **Could return**

                ``float`` or ``numpy.ndarray`` with shape ``(n_points,)``

    .. py:attribute:: DNNLikelihood.Likelihood.logpdf_args   

            Additional arguments required by
            :attr:`Likelihood.logpdf <DNNLikelihood.Likelihood.logpdf>`.
                
                - **type**: ``list`` or ``None``
                - **shape of list**: ``[ ]``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.pars_pos_poi   

            List or numpy array containing the positions in the parameters list of the
            parameters of interest. The input is always turned into a numpy array.
                
                - **type**: ``list`` or ```numpy.ndarray``
                - **shape**: ``(n_poi,)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.pars_pos_nuis   

            List or numpy array containing the positions in the parameters list of the
            nuisance parameters. The input is always turned into a numpy array.
                
                - **type**: ``list`` or ```numpy.ndarray``
                - **shape**: ``(n_nuis,)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.pars_init   

            List or numpy array containing an initial value for the parameters.
            The input is always turned into a numpy array.
                
                - **type**: ``list`` or ```numpy.ndarray``
                - **shape**: ``(n_pars,)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.pars_labels   

            List containing the parameters names
            as string.

                - **type**: ``list``
                - **shape**: ``[ ]``
                - **length**: ``n_pars``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.generic_pars_labels   

            List containing parameters names automatically generated by the function
            :func:`utils.define_generic_pars_labels <DNNLikelihood.utils.define_generic_pars_labels>`.
            In this notation all parameters of interest are named r"$\theta_{i}$" with i ranging between
            one to the number of parameters of interest and all nuisance parameters are named
            r"$\nu_{j}$" with j ranging between one to the number of nuisance parameters.

                - **type**: ``list``
                - **shape**: ``[ ]``
                - **length**: ``n_pars``

    .. py:attribute:: DNNLikelihood.Likelihood.pars_bounds   

            Array containing bounds 
            for the parameters.

                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``(n_pars,2)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.output_folder   

            Path (either relative to the code execution folder or absolute) where output files are saved.
            It is automatically converted into an absolute path. If no output folder is specified, 
            ``output_folder`` is set to the code execution folder.

                - **type**: ``str`` or ``None``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.likelihood_input_file   

            File name (either relative to the code execution folder or absolute) of a saved ``Likelihood`` object.
            Whenever this parameter is not ``None``` all other parameters are ignored and the object is
            reconstructed from the imported file using the ``Likelihood.__load_likelihood`` private method.
            The attribute ``Likelihood.likelihood_input_file`` can contain or not the ".pickle" extension. In case it does not, 
            the extension is added by the ``__init__`` method, which also adds the full path.

                - **type**: ``str`` or ``None``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Likelihood.verbose
         
         Set verbosity in the :meth:`Likelihood.__init__ <DNNLikelihood.Likelihood.__init__>` method. 
         See :ref:`Verbosity mode <verbosity_mode>`.

            - **type**: ``bool``
            - **default**: ``True``


Additional attributes
"""""""""""""""""""""

    .. py:attribute:: DNNLikelihood.Likelihood.output_files_base_path   

            Base name (with absolute path) of the output files produced by methods of the
            :class:`Likelihood <DNNLikelihood.Likelihood>`. It is set to 
            ``path.join(Likelihood.output_folder,Likelihood.name)``.
            
                - **type**: ``str``

    .. py:attribute:: DNNLikelihood.Likelihood.X_logpdf_max
            
            Array containing the values of parameters at the global maximum
            of the logpdf computed with the ``Likelihood.compute_maximum_logpdf`` method.
            The attribute is ``None`` unless the ``Likelihood.compute_maximum_logpdf`` method
            has been called or the ``Likelihood`` object has been imported from file and
            already contained a value for the attribute.

                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``(n_pars,)``

    .. py:attribute:: DNNLikelihood.Likelihood.Y_logpdf_max  

            Value of logpdf at its global maximum computed with the ``Likelihood.compute_maximum_logpdf`` 
            method. The attribute is ``None`` unless the ``Likelihood.compute_maximum_logpdf`` method
            has been called or the ``Likelihood`` object has been imported from file and already contained a  
            value for the attribute.

                - **type**: ``float`` or ``None``

    .. py:attribute:: DNNLikelihood.Likelihood.X_prof_logpdf_max

            Array containing the values of parameters at different local maxima of the logpdf computed
            with the ``Likelihood.compute_profiled_maxima`` method. The attribute is ``None`` unless
            the ``Likelihood.compute_profiled_maxima`` method has been called or the ``Likelihood`` 
            object has been imported from file and already contained a value for the attribute.
            This attribute can be used to initialize walkers in the :ref:``Sampler <sampler_class>`` object.

                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``np.array(n_points,n_pars)``
                - **default**: ``None``
                
    .. py:attribute:: DNNLikelihood.Likelihood.Y_prof_logpdf_max

            Array containing the values of logpdf at different local maxima computed
            with the ``Likelihood.compute_profiled_maxima`` method. The attribute is ``None`` unless
            the ``Likelihood.compute_profiled_maxima`` method has been called or the ``Likelihood`` 
            object has been imported from file and already contained a value for the attribute.

                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``np.array(n_points,)``
                - **default**: ``None``

    .. py:attribute:: DNNLikelihood.Likelihood.X_prof_logpdf_max_tmp

            Same as ``X_prof_logpdf_max``. It is assigned only when attempting to append newly 
            generated profiled maxima to an incompatible existing ``X_prof_logpdf_max``.
            This is a temporary attribute and it is not saved by ``Likelihood.save_likelihood``.

                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``np.array(n_points,n_pars)``
                - **default**: ``None``
                
    .. py:attribute:: DNNLikelihood.Likelihood.Y_prof_logpdf_max_tmp

            Same as ``Y_prof_logpdf_max``. It is assigned only when attempting to append newly 
            generated profiled maxima to an incompatible existing ``Y_prof_logpdf_max``.
            This is a temporary attribute and it is not saved by ``Likelihood.save_likelihood``.

                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``np.array(n_points,)``
                - **default**: ``None``

    .. py:attribute:: DNNLikelihood.Likelihood.likelihood_script_file

            Name (with absolute path) of the output file containing the code necessary to intantiate a 
            ``Likelihooh`` object and define the corresponing parameters. This file can be generated using 
            the :meth:`Likelihood.save_likelihood_script <DNNLikelihood.Likelihood.save_likelihood_script>` method.
            and is sometimes needed to properly run Markov Chain Monte Carlo in parallel (using ``Multiprocessing``) 
            through the ``Sampler`` object inside Jupyter notebooks on the Windows platform.
            The atribute is set to ``Likelihood.output_files_base_path+"_define_logpdf"+".py"`` while the path
            is set to ``Likelihood.output_folder``.

                - **type**: ``str``

Methods
"""""""

    .. automethod:: DNNLikelihood.Likelihood.__init__

    .. automethod:: DNNLikelihood.Likelihood._Likelihood__check_define_name

    .. automethod:: DNNLikelihood.Likelihood._Likelihood__load_likelihood

    .. automethod:: DNNLikelihood.Likelihood._Likelihood__set_pars_labels

    .. automethod:: DNNLikelihood.Likelihood.plot_logpdf_par

    .. automethod:: DNNLikelihood.Likelihood.compute_maximum_logpdf

    .. automethod:: DNNLikelihood.Likelihood.compute_profiled_maxima

    .. automethod:: DNNLikelihood.Likelihood.save_likelihood_log

    .. automethod:: DNNLikelihood.Likelihood.save_likelihood_json

    .. automethod:: DNNLikelihood.Likelihood.save_likelihood_pickle

    .. automethod:: DNNLikelihood.Likelihood.save_likelihood_script

    .. automethod:: DNNLikelihood.Likelihood.logpdf_fn
