The Sampler object
----------------------

Summary
^^^^^^^

Bla bla bla

Usage
^^^^^

Class
^^^^^

.. autoclass:: DNNLikelihood.Sampler
   :undoc-members:

Arguments
"""""""""

    .. py:attribute:: DNNLikelihood.Sampler.new_sampler

            If ``new_sampler=True`` a new ``Sampler`` object, corresponding to a new ``Sampler.backend``
            is generated. In case ``new_sampler=False``, the ``__init__`` method checks whether a backend file already
            exists and it loads it. If a backend file is not found ``new_sampler`` is automatically set to ``True``
            and a new one is created.
            To avoid inconsistencies between the object attributes and the ``Sampler.backend``, when initializing
            with ``new_sampler=False`` it is convenient to pass the ``likelihood_script_file`` argument equal to the 
            file name generated by ``Sampler.__init__`` the first time the ``Sampler`` was created. 
                - **type**: ``bool``
                - **default**: ``True``

    .. py:attribute:: DNNLikelihood.Sampler.likelihood_script_file

            File name (either relative to the code execution folder or absolute) of a ``likelihood_script_file`` 
            genetated with the ``Likelihood.generate_likelihood_script_file`` method. The script file is loaded 
            as a module, a ``Likelihood`` object is instantiated, and parameters and logpdf are extracted.
            When initializing thorugh the ``Sampler.likelihood`` argument and with ``Sampler.likelihood_script_file=None``,
            the ``Likelihood`` object is used to generate a ``likelihood_script_file``, the attribute
            ``Sampler.likelihood_script_file`` is assigned to the generated file, and the link to the ``Likelihood``
            object is deleted.
                - **type**: ``str`` or ``None``
                - **default**: ``None``

    .. py:attribute:: DNNLikelihood.Sampler.likelihood

            A :py:class:`DNNLikelihood.Likelihood` object. When a ``Likelihood`` object is passed the ``__init__``
            method uses it to generate a ``Likelihood.generate_likelihood_script_file`` in the 
            ``likelihood.output_folder`` and proceeds as if the argument :py:attr:`likelihood_script_file 
            <DNNLikelihood.Sampler.likelihood_script_file>` were passed. The automatically generated 
            ``Likelihood.generate_likelihood_script_file`` will contain, in the name, the "_from_sampler" suffix.
            Notice that the reference to the ``Likelihood`` object is only used to instantiate the ``Sampler`` 
            object and then deleted. No attribute ``Likelihood.likelihood`` remains after the ``__init__`` 
            method has been called.
            
            Always passing through the script file to create the ``Sampler`` object prevents problems when 
            running MCMC in parallel (using the ``multiprocessing`` package) on Windows machines. Moreover it provides
            a more robust way of properly reconstructing the ``Sampler`` object in the ``new_sampler=False`` mode.
                - **type**: ``obj`` or ``None``
                - **default**: ``None``

    .. py:attribute:: DNNLikelihood.Sampler.nsteps

            Number of MCMC steps to run. When an existing ``Sampler.backend`` is used (that is when the object
            is initialized with the `new_sampler=False`` flag ), nsteps, it is automatically updated to the available 
            steps in the existing backend. ``nsteps`` is assumed to always represents the final number of steps, so if
            the number of existing steps is not zero, the sampling will only run until it reaches ``nsteps``.
                - **type**: ``int`` or ``None```
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Sampler.moves_str

            String containing a ``Moves`` object from ``emcee`` (see the `emcee <https://emcee.readthedocs.io/en/stable/>`_ manual for reference). If ``None``
            is passed, the default ``emcee.moves.StretchMove()`` is passed.
                - **type**: ``str`` or ``None```
                - **default**: ``None`` 
                - **example**: "[(emcee.moves.StretchMove(0.7), 0.2), (emcee.moves.GaussianMove(0.1, mode='random',factor=None),0.8)]"
                    
                    This gives a move that is 20% StretchMove with parameter 0.7 and 80% GaussianMove with covariance 0.1 and mode 'random' (i.e.
                    updating a random single parameter at each step). See the `emcee.moves <https://emcee.readthedocs.io/en/stable/user/moves/>`_ manual for more details.

    .. py:attribute:: DNNLikelihood.Sampler.parallel_CPU

            If ``True`` the MCMC is run in 
            parallel on the CPU, otherwise only a single core is used.
                - **type**: ``bool``
                - **default**: ``True``       

    .. py:attribute:: DNNLikelihood.Sampler.vectorize

            If ``True``, the method :meth:`Sampler.logpdf <DNNLikelihood.Sampler.logpdf>` is expected to accept a list of
            points and to return a list of logpdf values. When ``Sampler.vectorize=True``, ``Sampler.parallel_CPU`` is automatically
            set to ``False``. See the |emcee_ensemble_salpler_link| documentation for more details.

.. |emcee_ensemble_salpler_link| raw:: html
    
    <a href="https://emcee.readthedocs.io/en/stable/user/sampler/#emcee.EnsembleSampler"  target="_blank"> emcee.EnsembleSampler</a>

Additional attributes
"""""""""""""""""""""

    .. py:method:: DNNLikelihood.Sampler.logpdf(x_pars, logpdf_args=None):

            Callable function that could accept ``x_pars`` either as a single point in parameter space corresponding 
            to an array with shape ``(n_pars,)``) or as a list of points corresponding to an array with 
            shape ``(n_points,n_pars)`` and that returns either a ``float`` or a list of computed logpdf values,
            depending on the input :attr:`Sampler.likelihood <DNNLikelihood.Sampler.likelihood>` or 
            :attr:`Sampler.likelihood_script_file <DNNLikelihood.Sampler.likelihood_script_file>`. 
            In case of a scalar function the attribute :attr:`Sampler.vectorize <DNNLikelihood.Sampler.vectorize>` 
            is automatically set to False, while for a vectorized ``Sampler.logpdf`` it is automatically set to ``True``
            (and :attr:`Sampler.parallel_CPU <DNNLikelihood.Sampler.parallel_CPU>` is set to ``False``).
            The function could also accept additional arguments ``args``, passed through the ``logpdf_args`` argument.

            - **Arguments**

                - **x_par**

                    Array containing the parameters values for which the lofpdf
                    is computed.

                        - **type**: ``numpy.ndarray``
                        - **shape**: ``(n_pars,)``

                - **args**

                    List containing additional inputs needed by the logpdf function. For instance when exporting a
                    ``Likelihood`` object from the in the case of :ref:``Histfactory object <histfactory_class>``,
                    args is set to ``args = [Histfactory.likelihood_dict[n]["obs_data"]]`` where *n* corresponds to
                    the selected likelihood in ``Histfactory.likelihood_dict``.

                        - **type**: ``list`` or None
                        - **shape of list**: ``[]``
            
            - **Returns**

                Value or array of values 
                of the logpdf.
            
                    - **type**: ``float`` or ``numpy.ndarray``
                    - **shape for numpy.ndarray**: ``(n_points,)``

    .. py:attribute:: DNNLikelihood.Sampler.logpdf_args   

            Additional arguments required by
            :attr:`Sampler.logpdf <DNNLikelihood.Sampler.logpdf>`.
                
                - **type**: ``list`` or ``None``
                - **shape of list**: ``[ ]``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Sampler.pars_pos_poi   

            Array containing the positions in the parameters list of the
            parameters of interest.
                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``(n_poi,)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Sampler.pars_pos_nuis   

            Array containing the positions in the parameters list of the
            nuisance parameters.
                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``(n_nuis,)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Sampler.pars_init_vec

            Array of points with parameter initialization for each 
            walker. 
                - **type**: ``numpy.ndarray`` or ``None``
                - **shape**: ``(nwalkers,n_pars)``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Sampler.pars_labels   

            List containing the parameters names
            as string.
                - **type**: ``list`` or ``None``
                - **shape**: ``[]``
                - **length**: ``n_pars``
                - **default**: ``None`` 

    .. py:attribute:: DNNLikelihood.Sampler.generic_pars_labels   

            List containing parameters names automatically generated by the function
            :func:`utils.define_generic_pars_labels <DNNLikelihood.utils.define_generic_pars_labels>`.
            In this notation all parameters of interest are named r"$\theta_{i}$" with i ranging between
            one to the number of parameters of interest and all nuisance parameters are named
            r"$\nu_{j}$" with j ranging between one to the number of nuisance parameters.

                - **type**: ``list``
                - **shape**: ``[ ]``
                - **length**: ``n_pars``

    .. py:attribute:: DNNLikelihood.Sampler.nwalkers

            Number of walkers (equivalent of chains 
            for Ensamble Sampler MCMC). It is automatically set to the length of
            :attr:`Sampler.pars_init_vec <DNNLikelihood.Sampler.pars_init_vec>` vector.
                - **type**: ``int``

    .. py:attribute:: DNNLikelihood.Sampler.ndims

            Number of dimensions of the input vector (i.e. number of 
            parameters entering in the logpdf). It is automatically set to the length of
            the first point in :attr:`Sampler.pars_init_vec <DNNLikelihood.Sampler.pars_init_vec>`.

                - **type**: ``int``

    .. py:attribute:: DNNLikelihood.Sampler.output_folder

            Path (either relative to the code execution folder or absolute)
            where output files are saved. The __init__ method automatically converts 
            the path into an absolute path. If no output folder is specified, ``output_folder`` 
            is set to the code execution folder.
                - **type**: ``str`` or ``None``
                - **default**: ``None``

    .. py:attribute:: DNNLikelihood.Sampler.output_base_filename

            Base name (with absolute path) of the output files generated by the 
            :class:`Sampler <DNNLikelihood.Sampler>` object. 
            It is set to ``path.join(Sampler.output_folder, Sampler.name)``.
            
                - **type**: ``str``

    .. py:attribute:: DNNLikelihood.Sampler.backend_filename

            Name (with absolute path) of the |emcee_link| HDF5 backend. 
            It is set to ``Sampler.output_base_filename+"_backend.h5"``.
            See the |emcee_backend_link| documentation for details about the ``emcee.Backends`` object.

                - **type**: ``str``

    .. py:attribute:: DNNLikelihood.Sampler.data_filename

            Name (with absolute path) of the saved :class:`Data <DNNLikelihood.Data>` object. 
            It is set to ``Sampler.output_base_filename+"_data.h5"``.

                - **type**: ``str``

    .. py:attribute:: DNNLikelihood.Sampler.figure_base_filename

            Base file name (with absolute path) of the generated figures. 
            It is set to ``Sampler.output_base_filename+"_figure.h5"``.

                - **type**: ``str``

    .. py:attribute:: DNNLikelihood.Sampler.moves

            An ``emcee.Moves`` object generated by evaluating the 
            :attr:`Sampler.moves_str <DNNLikelihood.Sampler.moves_str>` attribute.
            See the |emcee_moves_link| documentation for details about the ``emcee.Moves`` object.

                - **type**: ``emcee.Moves`` object

    .. py:attribute:: DNNLikelihood.Sampler.backend

            An ``emcee.Backends`` object.
            See the |emcee_backend_link| documentation for details about the ``emcee.Backends`` object.

                - **type**: ``emcee.Backends`` object

    .. py:attribute:: DNNLikelihood.Sampler.sampler

            An ``emcee.EnsembleSampler`` object.
            See the |emcee_ensemble_salpler_link| documentation for details about the ``emcee.EnsembleSampler`` object.

                - **type**: ``emcee.Backends`` object

.. |emcee_backend_link| raw:: html
    
    <a href="https://emcee.readthedocs.io/en/stable/user/backends/"  target="_blank"> emcee.Backends</a>

.. |emcee_moves_link| raw:: html
    
    <a href="https://emcee.readthedocs.io/en/stable/user/moves/"  target="_blank"> emcee.Moves</a>

Methods
"""""""

    .. automethod:: DNNLikelihood.Sampler.__init__

    .. automethod:: DNNLikelihood.Sampler._Sampler__check_params_backend

    .. automethod:: DNNLikelihood.Sampler._Sampler__load_sampler

    .. automethod:: DNNLikelihood.Sampler._Sampler__set_steps_to_run
    
    .. automethod:: DNNLikelihood.Sampler._Sampler__set_pars_labels

    .. automethod:: DNNLikelihood.Sampler.run_sampler

    .. automethod:: DNNLikelihood.Sampler.get_data_object

    .. automethod:: DNNLikelihood.Sampler.autocorr_func_1d

    .. automethod:: DNNLikelihood.Sampler.auto_window

    .. automethod:: DNNLikelihood.Sampler.autocorr_gw2010

    .. automethod:: DNNLikelihood.Sampler.autocorr_new

    .. automethod:: DNNLikelihood.Sampler.autocorr_ml

    .. automethod:: DNNLikelihood.Sampler.gelman_rubin

    .. automethod:: DNNLikelihood.Sampler.plot_gelman_rubin

    .. automethod:: DNNLikelihood.Sampler.plot_dist

    .. automethod:: DNNLikelihood.Sampler.plot_autocorr

    .. automethod:: DNNLikelihood.Sampler.plot_chains

    .. automethod:: DNNLikelihood.Sampler.plot_chains_logprob

References
^^^^^^^^^^

.. bibliography:: bib/sampler.bib
    :all: