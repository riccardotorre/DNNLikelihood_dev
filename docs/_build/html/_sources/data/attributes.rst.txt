Attributes
""""""""""

.. currentmodule:: DNNLikelihood

.. py:attribute:: Data.data_dictionary

    Dictionary used by the :class:`DnnLik <DNNLikelihood.DnnLik>` and 
    :class:`DnnLikEnsemble <DNNLikelihood.DnnLikEnsemble>` objects to keep track and store on the RAM
    the generated train/validation/test data (used, for instance, when training the DNNLikelihood and in making predictions).
    The dictionary is updated each time data are generated or updated and is not stored when saving the object (data
    indices only are stored with trained models by the :class:`DnnLik <DNNLikelihood.DnnLik>` and 
    :class:`DnnLikEnsemble <DNNLikelihood.DnnLikEnsemble>` objects).
    See the :mod:`DNNLikelihood <dnn_likelihood>` object and 
    the :mod:`DNNLikEnsemble <dnn_likelihood_ensemble>` object objects for more
    information.

        - **type**: ``dict`` with the following structure:

            - *"X_train"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current training dataset X points.
            - *"Y_train"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current training dataset Y points.
            - *"X_val"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current validation dataset X points.
            - *"Y_val"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current validation dataset Y points.
            - *"X_test"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current test dataset X points.
            - *"Y_test"* (value type: ``numpy.ndarray`` with dtype equal to :attr:`Data.dtype_required <DNNLikelihood.Data.dtype_required>`)
               |Numpy_link| array with current test dataset Y points.
            - *"idx_train"* (value type: ``numpy.ndarray`` with dtype ``int32``)
               |Numpy_link| array with the indices of the training points inside :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`.
            - *"idx_val"* (value type: ``numpy.ndarray`` with dtype ``int32``)
               |Numpy_link| array with the indices of the validation points inside :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`.
            - *"idx_test"* (value type: ``numpy.ndarray`` with dtype ``int32``)
               |Numpy_link| array with the indices of the test points inside :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`.

.. py:attribute:: Data.data_X

    Attribute corresponding to the input argument :argument:`data_X` and
    containing a |numpy_link| array with the X data points.

        - **type**: ``numpy.ndarray``
        - **default**: ``(npoints,ndim)``

.. py:attribute:: Data.data_Y

    Attribute corresponding to the input argument :argument:`data_X` and
    containing a |numpy_link| array with the x data points.

        - **type**: ``numpy.ndarray``
        - **default**: ``(npoints,ndim)``

.. py:attribute:: Data.dtype_required

    Required data type for the generation of the train/validation/test datasets. The attribute is always set to
    the value of the :argument:`dtype` input argument if not ``None`` and to ``"float64"`` if ``None``.
    It represents the data type of the data stored in the attribute 
    :attr:`Data.data_dictionary <DNNLikelihood.Data.data_dictionary>`.

        - **type**: ``str``
 
.. py:attribute:: Data.dtype_stored

    Data type of the dataset stored in the :attr:`Data.output_h5_file <DNNLikelihood.Data.output_h5_file>`.
    It is set to the value of the :argument:`dtype` input argument if not ``None`` and to ``"float64"`` if ``None`` 
    the first time the object is created and remains unchanged when saving/loading the 
    :mod:`Data <data>` object.

        - **type**: ``str``

.. py:attribute:: Data.pars_labels_auto

    List containing parameters names automatically generated by the function
    :func:`utils.define_pars_labels_auto <DNNLikelihood.utils.define_pars_labels_auto>`.
    All parameters of interest are named ``r"$\theta_{i}$"`` with ``i`` ranging between
    one to the number of parameters of interest and all nuisance parameters are named
    ``r"$\nu_{j}$"`` with ``j`` ranging between one to the number of nuisance parameters.
    Parameters labels are always used as "raw" strings (like, for instance, ``r"%s"%pars_labels_auto[0]``) 
    and can contain latex expressions that are properly compiled when making plots.

        - **type**: ``list``
        - **shape**: ``(ndims,)``

.. py:attribute:: Data.input_file

    Absolute path corresponding to the input argument :argument:`input_file`.
    Whenever this attribute is not ``None``, it is used to reconstructed the object from input files 
    (see the :meth:`Data.__init__ <DNNLikelihood.Data.__init__>`
    method for details).
          
        - **type**: ``str`` or ``None``

.. py:attribute:: Data.input_log_file

    Absolute path to the .log file containing a saved :mod:`Data <data>` object log (see
    the :meth:`Data.save_log <DNNLikelihood.Data.save_log>` method for details).
    It is automatically generated from the attribute
    :attr:`Data.input_file <DNNLikelihood.Data.input_file>`.
    When the latter is ``None``, the attribute is set to ``None``.
         
        - **type**: ``str`` or ``None``

.. py:attribute:: Data.input_object_h5_file

    Absolute path to the .h5 file containing a saved :mod:`Data <data>` object (see
    the :meth:`Data.save_object_h5 <DNNLikelihood.Data.save_object_h5>` method for details).
    It is automatically generated from the attribute
    :attr:`Data.input_file <DNNLikelihood.Data.input_file>`.
    When the latter is ``None``, the attribute is set to ``None``.
         
        - **type**: ``str`` or ``None``

.. py:attribute:: Data.input_samples_h5_file

    Absolute path to the .h5 file containing saved :class:`Data <DNNLikelihood.Data>`
    samples corresponding to the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>` 
    attribures (see the :meth:`Data.save_samples_h5 <DNNLikelihood.Data.save_samples_h5>`
    method for details).
    It is automatically generated from the attribute
    :attr:`Data.input_file <DNNLikelihood.Data.input_file>`.
    When the latter is ``None``, the attribute is set to ``None``.
         
        - **type**: ``str`` or ``None``

.. py:attribute:: Data.load_on_RAM

    Attribute corresponding to the input argument :argument:`load_on_RAM`.
    If ``True`` all data available in the HDF5 dataset :attr:`Dara.input_h5_file <DNNLikelihood.Data.input_h5_file>`
    are loaded into the RAM for faster generation of train/validation/test data. 
    If ``False`` the HDF5 file is open in read mode and train/validation/test data are generated on demand.
          
       - **type**: ``str`` or ``None``

.. py:attribute:: Data.log

    Dictionary containing a log of the :mod:`Data <data>` object calls. The dictionary has datetime 
    strings as keys and actions as values. Actions are also dictionaries, containing details of the methods calls.
          
        - **type**: ``dict``
        - **keys**: ``datetime.now().strftime("%Y-%m-%d-%H-%M-%S.%fZ")[:-3]``
        - **values**: ``dict`` with the following structure:

            - *"action"* (value type: ``str``)
               Short description of the action.
               **possible values**: ``"created"``, ``"loaded"``, ``"saved"``, 
               ``"updated data dictionary"``, ``"computed sample weights"``, ``"defines scalers"``.
            - *"data"* (value type: ``list`` of ``str``)
               List of keys of the :attr:`Data.data_dictionary <DNNLikelihood.Data.data_dictionary>`
               dictionary corresponding to values (data) that have been updated.
            - *"npoints train"* (value type: ``int``)
               Number of training points available in the updated 
               :attr:`Data.data_dictionary <DNNLikelihood.Data.data_dictionary>` dictionary.
            - *"npoints val"* (value type: ``int``)
               Number of validation points available in the updated 
               :attr:`Data.data_dictionary <DNNLikelihood.Data.data_dictionary>` dictionary.
            - *"npoints test"* (value type: ``int``)
               Number of test points available in the updated 
               :attr:`Data.data_dictionary <DNNLikelihood.Data.data_dictionary>` dictionary.
            - *"scaler X"* (value type: ``bool``)
               When defining scalers it indicates if X points have been scaled.
            - *"scaler Y"* (value type: ``bool``)
               When defining scalers it indicates if Y points have been scaled.
            - *"file name"* (value type: ``str``)
               File name of file involved in the action.
            - *"file path"* (value type: ``str``)
               Path of file involved in the action.
            - *"files names"* (value type: ``list`` of ``str``)
               List of file names of files involved in the action.
            - *"files paths"* (value type: ``list`` of ``str``)
               List of paths of files involved in the action.

.. py:attribute:: Data.name

    Attribute corresponding to the input argument :argument:`name` and containing the
    name of the :mod:`Data <data>` object. 
    If ``None`` is passed, then ``name`` is assigned the value 
    ``model_" + datetime.now().strftime("%Y-%m-%d-%H-%M-%S.%fZ")[:-3]+"_data"``, 
    while if a string is passed, the ``"_data"`` suffix is appended 
    (preventing duplication if it is already present).
    It is used to generate output files names.

       - **type**: ``str`` 

.. py:attribute:: Data.ndims

    Number of dimensions of the X data (i.e. number of 
    parameters entering in the logpdf). It is automatically set to the length of
    the first vector in the input argument :argument:`data_X`.

        - **type**: ``int``

.. py:attribute:: Data.npoints

    Number of X/Y data. It is automatically set to the length of
    the the input argument :argument:`data_X`.

        - **type**: ``int``

.. py:attribute:: Data.opened_dataset

    Opened HDF5 dataset. When importing data with the :attr:`Data.load_on_RAM <DNNLikelihood.Data.load_on_RAM>` 
    attribute set to ``False`` the HDF5 dataset is kept open until it is manually close with the
    :meth:`Data.close_opened_dataset <DNNLikelihood.Data.close_opened_dataset>` method.

        - **type**: ``HDF5 file`` object

.. py:attribute:: Data.output_folder

    Absolute path corresponding to the input argument
    :argument:`output_folder`. If the latter is ``None``, then 
    :attr:`Data.output_folder <DNNLikelihood.Data.output_folder>`
    is set to the code execution folder. If the folder does not exist it is created
    by the :func:`utils.check_create_folder <DNNLikelihood.utils.check_create_folder>`
    function.

        - **type**: ``str``

.. py:attribute:: Data.output_log_file

    Absolute path to the .log file where the :class:`Data <DNNLikelihood.Data>` 
    object log is saved (see the :meth:`Data.save_log <DNNLikelihood.Data.save_log>`
    method for details).
    It is automatically generated from the attribute
    :attr:`Data.output_folder <DNNLikelihood.Data.output_folder>`.
         
        - **type**: ``str`` 

.. py:attribute:: Data.output_object_h5_file

    Absolute path to the .h5 file where the :class:`Data <DNNLikelihood.Data>` 
    object is saved (see the :meth:`Data.save_object_h5 <DNNLikelihood.Data.save_object_h5>`
    method for details).
    It is automatically generated from the attribute
    :attr:`Histfactory.output_folder <DNNLikelihood.Histfactory.output_folder>`.
         
        - **type**: ``str`` 

.. py:attribute:: Data.output_samples_h5_file

    Absolute path to the .h5 file where the :class:`Data <DNNLikelihood.Data>` 
    samples corresponding to the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>` 
    attribures are saved (see the :meth:`Data.save_samples_h5 <DNNLikelihood.Data.save_samples_h5>`
    method for details).
    It is automatically generated from the attribute
    :attr:`Histfactory.output_folder <DNNLikelihood.Histfactory.output_folder>`.
         
        - **type**: ``str`` 

.. py:attribute:: Data.pars_bounds

    Attribute corresponding to the input argument :argument:`pars_bounds` and
    containing a |numpy_link| array with the parameters bounds. If the input argument is ``None``
    then bounds for all parameters are set to ``[-np.inf,np.inf]``.

        - **type**: ``numpy.ndarray``
        - **shape**: ``(ndims,2)``

.. py:attribute:: Data.pars_central   

    Attribute corresponding to the input argument :argument:`pars_central` and
    containing a |numpy_link| array with the central values of the parameters. 
    If the input argument is ``None``
    then central values for all parameters are set to ``0``.
        
        - **type**: ``numpy.ndarray``
        - **shape**: ``(ndims,)``

.. py:attribute:: Data.pars_labels

    List corresponding to the input argument :argument:`pars_labels`. If the input argument is ``None`` then
    :attr:`Data.pars_labels <DNNLikelihood.Data.pars_labels>` is set equal to the automatically
    generated :attr:`Data.pars_labels_auto <DNNLikelihood.Data.pars_labels_auto>`.
    Parameters labels are always parsed as "raw" strings (like, for instance, ``r"%s"%pars_labels[0]``) 
    and can contain latex expressions that are properly compiled when making plots.

        - **type**: ``list``
        - **shape**: ``(ndims,)``

.. py:attribute:: Data.pars_pos_nuis   

    |Numpy_link| array corresponding to the input argument :argument:`pars_pos_nuis`.

        - **type**: ``list`` or ``numpy.ndarray``
        - **shape**: ``(n_nuis,)``

.. py:attribute:: Data.pars_pos_poi   

    |Numpy_link| array corresponding to the input argument :argument:`pars_pos_poi`.

        - **type**: ``list`` or ``numpy.ndarray``
        - **shape**: ``(n_poi,)``

.. py:attribute:: Data.test_fraction

    Attribute corresponding to the input argument :argument:`test_fraction`.
    It specifies the fraction of data that is used as test set. The first ``(1-test_fraction)`` fraction
    of points will be used to generate train and validation data while the remaining ``test_fraction``
    to generate test data.

.. py:attribute:: Data.test_range

    Attribute set from the :attr:`Data.test_fraction <DNNLikelihood.Data.test_fraction>`
    attribute and containing the range of test data indices in the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`
    |numpy_link| arrays.

.. py:attribute:: Data.train_range

    Attribute set from the :attr:`Data.test_fraction <DNNLikelihood.Data.test_fraction>`
    attribute and containing the range of train/validation data indices in the 
    :attr:`Data.data_X <DNNLikelihood.Data.data_X>` and :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>`
    |numpy_link| arrays.

.. py:attribute:: Data.verbose

    Attribute corresponding to the input argument :argument:`verbose`.
    It represents the verbosity mode of the 
    :meth:`Data.__init__ <DNNLikelihood.Data.__init__>` 
    method and the default verbosity mode of all class methods that accept a
    ``verbose`` argument.
    See :ref:`Verbosity mode <verbosity_mode>`.

        - **type**: ``bool`` or ``int``

.. include:: ../external_links.rst