Attributes
""""""""""
     
.. currentmodule:: DNNLikelihood

.. py:attribute:: Lik.input_file  

    See :attr:`input_file <common_classes_attributes.input_file>`.

.. py:attribute:: Lik.input_folder

    See :attr:`input_folder <common_classes_attributes.input_folder>`.

.. py:attribute:: Lik.input_h5_file

    See :attr:`input_h5_file <common_classes_attributes.input_h5_file>`.

.. py:attribute:: Lik.input_log_file

    See :attr:`input_log_file <common_classes_attributes.input_log_file>`.

.. py:attribute:: Lik.log

    See :attr:`log <common_classes_attributes.log>`.

.. py:attribute:: Lik.logpdf

    This attribure is actually a method, built through the 
    :class:`_FunctionWrapper <DNNLikelihood.utils._FunctionWrapper>` class.
    See the :ref:`logpdf <likelihood_logpdf_method>` method documentation
    for more details.

.. py:attribute:: Lik.name

    See :attr:`name <common_classes_attributes.name>`.

.. py:attribute:: Lik.ndims

    See :attr:`ndims <common_classes_attributes.ndims>`.

.. py:attribute:: Lik.output_figures_base_file_name

    See :attr:`output_figures_base_file_name <common_classes_attributes.output_figures_base_file_name>`.

.. py:attribute:: Lik.output_figures_base_file_path

    See :attr:`output_figures_base_file_path <common_classes_attributes.output_figures_base_file_path>`.

.. py:attribute:: Lik.output_figures_folder

    See :attr:`output_figures_folder <common_classes_attributes.output_figures_folder>`.
 
.. py:attribute:: Lik.output_folder

    See :attr:`output_folder <common_classes_attributes.output_folder>`.

.. py:attribute:: Lik.output_h5_file

    See :attr:`output_h5_file <common_classes_attributes.output_h5_file>`.

.. py:attribute:: Lik.output_json_file

    See :attr:`output_json_file <common_classes_attributes.output_json_file>`.

.. py:attribute:: Lik.output_log_file

    See :attr:`output_log_file <common_classes_attributes.output_log_file>`.

.. py:attribute:: Lik.output_predictions_json_file

    See :attr:`output_predictions_json_file <common_classes_attributes.output_predictions_json_file>`.

.. py:attribute:: Lik.pars_bounds

    See :attr:`pars_bounds <common_classes_attributes.pars_bounds>`.

.. py:attribute:: Lik.pars_central    

    See :attr:`pars_central <common_classes_attributes.pars_central>`.

.. py:attribute:: Lik.pars_labels    

    See :attr:`pars_labels <common_classes_attributes.pars_labels>`.

.. py:attribute:: Lik.pars_labels_auto    

    See :attr:`pars_labels_auto <common_classes_attributes.pars_labels_auto>`.

.. py:attribute:: Lik.pars_pos_nuis    

    See :attr:`pars_pos_nuis <common_classes_attributes.pars_pos_nuis>`.

.. py:attribute:: Lik.pars_pos_poi    

    See :attr:`pars_pos_poi <common_classes_attributes.pars_pos_poi>`.

.. py:attribute:: Lik.predictions

    Nested dictionary containing predictions generated by the following methods:

        - :meth:`Lik.compute_maximum_logpdf <DNNLikelihood.Lik.compute_maximum_logpdf>`
        - :meth:`Lik.compute_profiled_maxima_logpdf <DNNLikelihood.Lik.compute_profiled_maxima_logpdf>`
        - :meth:`Lik.plot_logpdf_par <DNNLikelihood.Lik.plot_logpdf_par>`
        - :meth:`Lik.plot_tmu_1d <DNNLikelihood.Lik.plot_tmu_1d>`

        methods.

        - **type**: ``dict``

        - **schematic example**:

            .. code-block:: python

                {'logpdf_max': {<timestamp1>: {'x': numpy.ndarray,
                                               'y': numpy.float64,
                                               'pars_init': numpy.ndarray,
                                               'pars_bounds': numpy.ndarray,
                                               'optimizer': {'name': str, 'args': list, 'kwargs': {'method': str}},
                                               'minimization_options': {'maxiter': int, 'ftol': float},
                                               'optimization_time': float},
                                <timestamp2>: {'...'},
                                     ...},
                 'logpdf_profiled_max': {<timestamp2>: {'X': numpy.ndarray,
                                                        'Y': numpy.ndarray,
                                                        'tmu': numpy.ndarray,
                                                        'pars': list,
                                                        'pars_ranges': list,
                                                        'pars_init': numpy.ndarray,
                                                        'pars_bounds': numpy.ndarray,
                                                        'optimizer': {'name': str, 'args': list, 'kwargs': {'method': str}},
                                                        'minimization_options': {'maxiter': int, 'ftol': float},
                                                        'optimization_times': list,
                                                        'total_optimization_time': numpy.float64},
                                         ...},
                 'Figures': {<timestamp3>: list,
                             ...}

.. py:attribute:: Lik.script_file

    Absolute path to the .py script containing the code necessary to create a 
    :class:`Lik <DNNLikelihood.Lik>` object and define the corresponing parameters.
    This file can be generated using the 
    :meth:`Lik.save_script <DNNLikelihood.Lik.save_script>` method
    and is used to initialize a :class:`Sampler <DNNLikelihood.Sampler>` object 
    (see :ref:`the Sampler object <sampler_object>`). This is to ensure that that Markov Chain Monte Carlo properly 
    runs in parallel (using the |multiprocessing_link| package) inside Jupyter notebooks also on the Windows OS.
    It is automatically generated from the
    :attr:`Lik.output_folder <DNNLikelihood.Lik.output_folder>` and 
    :attr:`Lik.name <DNNLikelihood.Lik.name>` attributes, by appending the "_script.py" suffix.

        - **type**: ``str``

.. py:attribute:: Lik.verbose

    See :attr:`verbose <common_classes_attributes.verbose>`.

.. include:: ../external_links.rst