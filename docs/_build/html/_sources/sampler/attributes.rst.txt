Attributes
""""""""""

.. currentmodule:: DNNLikelihood

.. py:attribute:: Sampler.backend

    An ``emcee.Backends`` object (see the |emcee_backend_link| documentation for details).
    It is initialized (either from scratch or through an existing file) by the 
    :meth:`Sampler.__init_backend <DNNLikelihood.Sampler._Sampler__init_backend>` method.

        - **type**: ``emcee.Backends`` object

.. py:attribute:: Sampler.backend_file

    Name (with absolute path) of the |emcee_link| HDF5 backend file. 
    It is set to :attr:`Sampler.output_folder <DNNLikelihood.Sampler.output_folder>` ``+ "_backend.h5"``.
    See the |emcee_backend_link| documentation for details about the ``emcee.Backends`` object.

        - **type**: ``str``

.. py:attribute:: Sampler.input_file  

   See :attr:`input_file <common_classes_attributes.input_file>`.

.. py:attribute:: Sampler.input_folder

    See :attr:`input_folder <common_classes_attributes.input_folder>`.

.. py:attribute:: Sampler.input_h5_file

   See :attr:`input_h5_file <common_classes_attributes.input_h5_file>`.

.. py:attribute:: Sampler.input_log_file

   See :attr:`input_log_file <common_classes_attributes.input_log_file>`.

.. py:attribute:: Sampler.likelihood_script_file

    Absolute path to the .py script containing the code necessary to intantiate a 
    :class:`Lik <DNNLikelihood.Lik>` object and define the corresponing parameters.  
    The :meth:`Sampler.__init_likelihood <DNNLikelihood.Sampler._Sampler__init_likelihood>` method
    loads it as a module, which instantiate a :class:`Lik <DNNLikelihood.Lik>` object
    and defines parameters and logpdf.
    See the :meth:`Sampler.__init__ <DNNLikelihood.Sampler.__init__>` method for details on how the attribute
    is set.
        
        - **type**: ``str`` or ``None``
        - **default**: ``None``

.. py:attribute:: Sampler.log

   See :attr:`log <common_classes_attributes.log>`.

.. py:attribute:: Sampler.logpdf

    Callable function that could accept ``x_pars`` either as a single point in parameter space corresponding 
    to an array with shape ``(ndims,)`` or as a list of points corresponding to an array with 
    shape ``(n_points,ndims)`` and that returns either a ``float`` or a list of computed logpdf values,
    depending on the input. 
    In case of a scalar function the attribute :attr:`Sampler.vectorize <DNNLikelihood.Sampler.vectorize>` 
    is automatically set to False.
    The function could also accept additional arguments ``args``, passed through the 
    :attr:`Sampler.logpdf_args <DNNLikelihood.Sampler.logpdf_args>` attribute.
    The attribute is assigned by the :meth:`Sampler.__init_likelihood <DNNLikelihood.Sampler._Sampler__init_likelihood>` method.

        - **type**: ``callable``

    - **Could accept**

        - **x_par**

            Values of the parameters for which logpdf is computed.
            It could be a single point in parameter space corresponding to an array with shape ``(ndims,)``
            or a list of points corresponding to an array with shape ``(n_points,ndims)``.
                
                - **type**: ``numpy.ndarray``
                - **possible shapes**: ``(ndims,)`` or ``(n_points,ndims)``

        - **args**

            List of additional arguments required 
            by :attr:`Sampler.logpdf <DNNLikelihood.Sampler.logpdf>` and passed through the 
            :attr:`Sampler.logpdf_args <DNNLikelihood.Sampler.logpdf_args>` attribute. 
                
                - **type**: ``list`` or None
                - **shape**: ``(nargs,)``
    
    - **Could return**
    
        Value or array of values 
        of the logpdf.
    
            - **type**: ``float`` or ``numpy.ndarray``
            - **shape for numpy.ndarray**: ``(n_points,)``

.. py:attribute:: Sampler.logpdf_args   

    Attribute containing a list of optional arguments (``*args``) for the :argument:`logpdf` function.
        
        - **type**: ``list`` or ``None``
        - **shape**: ``(nargs,)``

.. py:attribute:: Sampler.logpdf_kwargs   

    Attribute containing a dictionary of optional keyword arguments (``**kwargs``) for the :argument:`logpdf` function.
        
        - **type**: ``dict`` or ``None``

.. py:attribute:: Sampler.moves

    An ``emcee.moves`` object generated by evaluating the 
    :attr:`Sampler.moves_str <DNNLikelihood.Sampler.moves_str>` attribute.
    See the |emcee_moves_link| documentation for details.

        - **type**: ``emcee.moves`` object

.. py:attribute:: Sampler.moves_str

    String representing an instance to an ``emcee.moves`` object. If ``None``
    is passed, the default ``emcee.moves.StretchMove()`` is passed.
    See the |emcee_moves_link| documentation for details.

        - **type**: ``str`` or ``None``
        - **example**: ``"[(moves.StretchMove(0.7), 0.2), (moves.GaussianMove(0.1, mode='random',factor=None),0.8)]"``
            
            where ``moves`` represents the ``emcee.moves`` class.
            This gives a move that is 20% StretchMove with parameter 0.7 and 80% GaussianMove with covariance 0.1 and mode "random" (i.e.
            updating a single randomly chosen parameter at each step).

.. py:attribute:: Sampler.name

    See :attr:`name <common_classes_attributes.name>`.

.. py:attribute:: Sampler.ndims

    See :attr:`ndims <common_classes_attributes.ndims>`.

.. py:attribute:: Sampler.nsteps_available

    Number of MCMC steps available in the current :attr:`Sampler.backend <DNNLikelihood.Sampler.backend>`. 
    When the object is loaded from files then, if :argument:`nsteps_required` is larger than 
    :attr:`Sampler.nsteps_available <DNNLikelihood.Sampler.nsteps_available>`,
    then the :attr:`Sampler.nsteps_required <DNNLikelihood.Sampler.nsteps_required>` attribute is set equal to
    :attr:`Sampler.nsteps_available <DNNLikelihood.Sampler.nsteps_available>`.

        - **type**: ``int``

.. py:attribute:: Sampler.nsteps_required

    Attribute corresponding to the input argument :argument:`nsteps_required` and representing the
    final number of MCMC steps to run. 
    When the object is loaded from files then, if :argument:`nsteps_required` is larger than 
    :attr:`Sampler.nsteps_available <DNNLikelihood.Sampler.nsteps_available>`,
    then the :attr:`Sampler.nsteps_required <DNNLikelihood.Sampler.nsteps_required>` attribute is set equal to
    :attr:`Sampler.nsteps_available <DNNLikelihood.Sampler.nsteps_available>`.
    The attribute always represents the final number of steps, meaning that the sampling will always run 
    for a number of steps given by the difference between
    :attr:`Sampler.nsteps_required <DNNLikelihood.Sampler.nsteps_required>` and 
    :attr:`Sampler.nsteps_available <DNNLikelihood.Sampler.nsteps_available>`.
        
        - **type**: ``int``

.. py:attribute:: Sampler.nwalkers

    Number of walkers (or chains) of the sampler. 
    It is set from the input argument :argument:`nwalkers`.
    If the latter is ``None``, then it is automatically set to twice the number of dimensions of the
    :attr:`Sampler.logpdf <DNNLikelihood.Sampler.logpdf>` function (given by the 
    :attr:`Sampler.ndims <DNNLikelihood.Sampler.ndims>` attribute).
        
        - **type**: ``int``

.. py:attribute:: Sampler.output_figures_base_file_name

    See :attr:`output_figures_base_file_name <common_classes_attributes.output_figures_base_file_name>`.

.. py:attribute:: Sampler.output_figures_base_file_path

    See :attr:`output_figures_base_file_path <common_classes_attributes.output_figures_base_file_path>`.

.. py:attribute:: Sampler.output_figures_folder

   See :attr:`output_figures_folder <common_classes_attributes.output_figures_folder>`.

.. py:attribute:: Sampler.output_folder

   See :attr:`output_folder <common_classes_attributes.output_folder>`.

.. py:attribute:: Sampler.output_h5_file

   See :attr:`output_h5_file <common_classes_attributes.output_h5_file>`.

.. py:attribute:: Sampler.output_json_file

   See :attr:`output_json_file <common_classes_attributes.output_json_file>`.

.. py:attribute:: Sampler.output_log_file

   See :attr:`output_log_file <common_classes_attributes.output_log_file>`.

.. py:attribute:: Sampler.output_predictions_json_file

   See :attr:`output_predictions_json_file <common_classes_attributes.output_predictions_json_file>`.

.. py:attribute:: Sampler.parallel_CPU

    Attribute corresponding to the input argument :argument:`parallel_CPU`.
    If ``True`` the MCMC is run in parallel on the available CPU cores, otherwise only a single core is used.

        - **type**: ``bool``

.. py:attribute:: Sampler.pars_bounds   

    See :attr:`pars_bounds <common_classes_attributes.pars_bounds>`.

.. py:attribute:: Sampler.pars_central   

    See :attr:`pars_central <common_classes_attributes.pars_central>`.

.. py:attribute:: Sampler.pars_init_vec

    Array of points with parameters initialization for each walker. 
    It is set by the
    :meth:`Sampler.__init_likelihood <DNNLikelihood.Sampler._Sampler__init_likelihood>` method. This method tried to set
    parameters initialization from profiled maxima information available in the :obj:`Likelihood <likelihood>` object.
    If such information is not available or the number of local maxima is less than the required number points, then 
    the missing points are generated with a standard normal smearing aroung the 
    :attr:`Sampler.pars_central <DNNLikelihood.Sampler.pars_central>` value.

        - **type**: ``numpy.ndarray``
        - **shape**: ``(nwalkers,ndims)``
 
.. py:attribute:: Sampler.pars_labels   

    See :attr:`pars_labels <common_classes_attributes.pars_labels>`.

.. py:attribute:: Sampler.pars_labels_auto   

    See :attr:`pars_labels_auto <common_classes_attributes.pars_labels_auto>`.

.. py:attribute:: Sampler.pars_pos_nuis   

    See :attr:`pars_pos_nuis <common_classes_attributes.pars_pos_nuis>`.

.. py:attribute:: Sampler.pars_pos_poi   

    See :attr:`pars_pos_poi <common_classes_attributes.pars_pos_poi>`.

.. py:attribute:: Sampler.predictions   

    Nested dictionary containing predictions computed with the 

        - :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` 
        - :meth:`Sampler.plot_gelman_rubin <DNNLikelihood.Sampler.plot_gelman_rubin>`
        - :meth:`Sampler.plot_dist <DNNLikelihood.Sampler.plot_dist>`
        - :meth:`Sampler.plot_chains <DNNLikelihood.Sampler.plot_chains>`
        - :meth:`Sampler.plot_chains_logpdf <DNNLikelihood.Sampler.plot_chains_logpdf>`
        
    methods.   

        - **type**: ``dict``

..             - *"gelman_rubin"* (value type: ``dict``)
..                 Dictionary containing information on Gelman-Rubin convergernce metrics. This dictionary has the following structure:
.. 
..                 - *"timestamp"* (value type: ``dict``)
..                     Dictionary containing information on Gelman-Rubin convergernce metrics computed at time ``timestamp``. 
..                     The key is a string of the form ``datetime.now().strftime("%Y-%m-%d-%H-%M-%S.%fZ")[:-3]``.
..                     This dictionary has the following structure:
.. 
..                     - *"pars"* (value type: ``numpy.ndarray``, shape: ``(npars,)``)
..                         |Numpy_link| array of parameters for which the Gelman-Rubin metrics are computed.
..                         It corresponds to the ``pars`` input argument of the 
..                         :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` method.
..                     - *"pars_vals"* (value type: ``numpy.ndarray``, shape: ``(npoints,)``)
..                         |Numpy_link| array of values of parameters for each point for which the Gelman-Rubin metrics are computed.
..                         The number of points corresponds to the product of the lengths of the ``pars`` and ``nsteps``
..                         input arguments of the 
..                         :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` method.
..                     - *"nsteps"* (value type: ``numpy.ndarray``, shape: ``(len(nsteps),)``)
..                         |Numpy_link| array of number of steps for which the Gelman-Rubin metrics are computed.
..                     - *"Rc"* (value type: ``numpy.ndarray``, shape: ``(npoints,)``)
..                         |Numpy_link| array with :math:`R_{c}` values (see the 
..                         :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` method for
..                         the definition)
..                     - *"Vhat"* (value type: ``numpy.ndarray``, shape: ``(npoints,)``)
..                         |Numpy_link| array with :math:`\\hat{V}` values (see the 
..                         :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` method for
..                         the definition)
..                     - *"W"* (value type: ``numpy.ndarray``, shape: ``(npoints,)``)
..                         |Numpy_link| array with :math:`W` values (see the 
..                         :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` method for
..                         the definition)
..                     - *"evaluation_times"* (value type: ``numpy.ndarray``, shape: ``(npoints,)``)
..                         Evaluation time for each point for which the Gelman-Rubin metrics are computed.
..                     - *"global_evaluation_time"* (value type: ``numpy.ndarray``, shape: ``(ndims,)``)
..                         Total evaluation time for the Gelman-Rubin metrics evaluated in the current call to the 
..                         :meth:`Sampler.compute_gelman_rubin <DNNLikelihood.Sampler.compute_gelman_rubin>` method.
.. 
..         - *"Figures"* (value type: ``dict``)
..             Dictionary containing information on figures. This dictionary has the following structure:
.. 
..             - *"timestamp"* (value type: ``list``)
..                 Dictionary containing the list of absolute paths of the figures produced at time ``timestamp``.

      - **schematic example**:

         .. code-block:: python

            {'logpdf_max': {'timestamp1': {'x': numpy.ndarray,
                                          'y': numpy.float64,
                                          'pars_init': numpy.ndarray,
                                          'optimizer': {'method': str,
                                                        'options': {'maxiter': int, 
                                                                    'ftol': float},
                                                        'name': str},
                                          'optimization_time': float},
                            'timestamp2': ...}
             'logpdf_profiled_max': {'timestamp1': {'X': numpy.ndarray,
                                                   'Y': numpy.ndarray,
                                                   'tmu': numpy.ndarray,
                                                   'pars': list,
                                                   'pars_ranges': list,
                                                   'pars_init': numpy.ndarray,
                                                   'pars_bounds': numpy.ndarray,
                                                   'optimizer': {'method': str,
                                                                 'options': {'maxiter': int, 
                                                                             'ftol': float},
                                                                 'name': str},
                                                   'optimization_times': list,
                                                   'total_optimization_time': numpy.float64},
                                     'timestamp2': ...},
             'Figures': {'timestamp1': [str, ...],
                         'timestamp2': [str, ...],
                         ...}

.. py:attribute:: Sampler.sampler

    An ``emcee.EnsembleSampler`` object (see the |emcee_ensemble_sampler_link| documentation for details).
    It is initialized by the :meth:`Sampler.__init_sampler <DNNLikelihood.Sampler._Sampler__init_sampler>`
    method.

        - **type**: ``emcee.EnsembleSampler`` object

.. py:attribute:: Sampler.vectorize

    If ``True``, the function :attr:`Sampler.logpdf <DNNLikelihood.Sampler.logpdf>` is expected to accept a list of
    points and to return a list of logpdf values. When it is set to ``True`` the
    :meth:`Sampler.__check_vectorize <DNNLikelihood.Sampler._Sampler__check_vectorize>` checks the consistency by
    calling :attr:`Sampler.logpdf <DNNLikelihood.Sampler.logpdf>` on an array of points and, in case it fails,
    it sets :attr:`Sampler.vectorize <DNNLikelihood.Sampler.vectorize>` to ``False``.
    When it is ``True``, the :attr:`Sampler.parallel_CPU <DNNLikelihood.Sampler.parallel_CPU>`
    attribute is automatically set to ``False``. 
    See the |emcee_ensemble_sampler_link| documentation for more details.

       - **type**: ``bool`` 

.. py:attribute:: Sampler.verbose

    See :attr:`verbose <common_classes_attributes.verbose>`.

.. include:: ../external_links.rst