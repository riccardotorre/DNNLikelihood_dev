.. _data_object:

The Data object
----------------------

Summary
^^^^^^^

Bla bla bla

Usage
^^^^^

Class
^^^^^

.. autoclass:: DNNLikelihood.Data
   :undoc-members:

.. _data_arguments:

Arguments
"""""""""

    .. option:: name

        Name of the :class:`Data <DNNLikelihood.Data>` object.
        It is used to build the :attr:`Data.name <DNNLikelihood.Data.name>` attribute.
         
            - **type**: ``str`` or ``None``
            - **default**: ``None``   

    .. option:: data_X

        |Numpy_link| array containing the x data points.
        It is used to build the :attr:`Data.data_X <DNNLikelihood.Data.data_X>` attribute.

            - **type**: ``numpy.ndarray`` or ``None``
            - **default**: ``(npoints,ndim)``

    .. option:: data_Y

        |Numpy_link| array containing the x data points.
        It is used to build the :attr:`Data.data_Y <DNNLikelihood.Data.data_Y>` attribute.

            - **type**: ``numpy.ndarray`` or ``None``
            - **default**: ``(npoints,)``

    .. option:: dtype

        Data type. All data are converted, after import either from argument or from files, to the diven data type.
        It is used to build the :attr:`Data.dtype <DNNLikelihood.Data.dtype>` attribute.

            - **type**: ``str`` or ``None``
            - **default**: ``float64`` 

    .. option:: pars_pos_poi   

        List or |numpy_link| array containing the positions in the parameters list of the
        parameters of interest.
        It is used to build the :attr:`Data.pars_pos_poi <DNNLikelihood.Data.pars_pos_poi>` attribute.

            - **type**: ``list`` or ``numpy.ndarray``
            - **shape**: ``(n_poi,)``
            - **default**: ``None`` 

    .. option:: pars_pos_nuis   

        List or |numpy_link| array containing the positions in the parameters list of the
        nuisance parameters.
        It is used to build the :attr:`Data.pars_pos_nuis <DNNLikelihood.Data.pars_pos_nuis>` attribute.

            - **type**: ``list`` or ``numpy.ndarray``
            - **shape**: ``(n_nuis,)``
            - **default**: ``None`` 

    .. option:: pars_labels   

        List containing the parameters names as strings.
        Parameters labels are always parsed as "raw" strings (like, for instance, ``r"%s"%pars_labels[0]``) 
        and can contain latex expressions that are properly compiled when making plots.
        It is used to build the :attr:`Data.pars_labels <DNNLikelihood.Data.pars_labels>` attribute.

            - **type**: ``list``
            - **shape**: ``[ ]``
            - **length**: ``n_pars``
            - **default**: ``None`` 

    .. option:: pars_bounds   

        List or |numpy_link| array containing containing bounds for the parameters.
        It is used to build the :attr:`Data.pars_bounds <DNNLikelihood.Data.pars_bounds>` attribute.

            - **type**: ``numpy.ndarray`` or ``None``
            - **shape**: ``(n_pars,2)``
            - **default**: ``None`` 

    .. option:: test_fraction

    .. option:: load_on_RAM

    .. option:: output_folder
         
        Path (either relative to the code execution folder or absolute) where output files are saved.
        It is used to set the :attr:`Data.output_folder <DNNLikelihood.Data.output_folder>` attribute.
            
            - **type**: ``str`` or ``None``
            - **default**: ``None``

    .. option:: data_input_file

    .. option:: verbose

        Argument used to set the verbosity mode of the :meth:`Data.__init__ <DNNLikelihood.Data.__init__>` 
        method and the default verbosity mode of all class methods that accept a ``verbose`` argument.
        See :ref:`Verbosity mode <verbosity_mode>`.

           - **type**: ``bool``
           - **default**: ``True``


    .. py:attribute:: DNNLikelihood.Data.name

        Name of the :class:`Data <DNNLikelihood.Data>` object. It is used to generate output files and is passed
        to the generated likelihood objects.
        If no ``name`` is specified (default), name is assigned the value ``histfactory_" + datetime.now().strftime("%Y-%m-%d-%H-%M-%S")``  
        
        - **type**: ``str`` or ``None``
        - **default**: ``None``   

    .. py:attribute:: DNNLikelihood.Data.data_X

            If ``new_sampler=True`` a new ``Sampler`` object, corresponding to a new ``Sampler.backend``
            is generated. In case ``new_sampler=False``, the ``__init__`` method checks whether a backend file already
            exists and it loads it. If a backend file is not found ``new_sampler`` is automatically set to ``True``
            and a new one is created.
            To avoid inconsistencies between the object attributes and the ``Sampler.backend``, when initializing
            with ``new_sampler=False`` it is convenient to pass the ``likelihood_script_file`` argument equal to the 
            file name generated by ``Sampler.__init__`` the first time the ``Sampler`` was created. 
                
                - **type**: ``bool``
                - **default**: ``True``

    .. py:attribute:: DNNLikelihood.Data.data_Y

    .. py:attribute:: DNNLikelihood.Data.dtype

    .. py:attribute:: DNNLikelihood.Data.pars_pos_poi

    .. py:attribute:: DNNLikelihood.Data.pars_pos_nuis
    
    .. py:attribute:: DNNLikelihood.Data.pars_labels

    .. py:attribute:: DNNLikelihood.Data.test_fraction

    .. py:attribute:: DNNLikelihood.Data.data_input_file

    .. py:attribute:: DNNLikelihood.Data.output_folder

    .. py:attribute:: DNNLikelihood.Data.load_on_RAM

    .. py:attribute:: DNNLikelihood.Data.verbose

Additional attributes
"""""""""""""""""""""


Methods
"""""""

    .. automethod:: DNNLikelihood.Data.__init__

    .. automethod:: DNNLikelihood.Data._Data__check_define_input_files

    .. automethod:: DNNLikelihood.Data._Data__check_define_output_files

    .. automethod:: DNNLikelihood.Data._Data__check_define_name

    .. automethod:: DNNLikelihood.Data._Data__check_define_pars

    .. automethod:: DNNLikelihood.Data._Data__check_define_mode

    .. automethod:: DNNLikelihood.Data._Data__init_mode

    .. automethod:: DNNLikelihood.Data._Data__create_data

    .. automethod:: DNNLikelihood.Data._Data__load_data

    .. automethod:: DNNLikelihood.Data._Data__check_data

    .. automethod:: DNNLikelihood.Data.define_test_fraction

    .. automethod:: DNNLikelihood.Data.close_samples

    .. automethod:: DNNLikelihood.Data.save_data

    .. automethod:: DNNLikelihood.Data.generate_train_indices

    .. automethod:: DNNLikelihood.Data.generate_train_data

    .. automethod:: DNNLikelihood.Data.update_train_indices

    .. automethod:: DNNLikelihood.Data.update_train_data

    .. automethod:: DNNLikelihood.Data.generate_test_indices

    .. automethod:: DNNLikelihood.Data.generate_test_data

    .. automethod:: DNNLikelihood.Data.compute_sample_weights

    .. automethod:: DNNLikelihood.Data.define_scalers