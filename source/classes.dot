digraph "classes" {
rankdir=BT
charset="utf-8"
"DNNLikelihood.base.Figures" [color="black", fontcolor="black", label="{Figures|figures : dict, NoneType\l|__init__(figures_dict: Optional[Dict[str, List[Path]]], verbose: Union[int, bool, None]): None\lcheck_delete_figures(file_manager: FileManager, delete_figures: bool, verbose: Optional[IntBool]): None\lcheck_figures_dic(output_figures_folder: Path): Dict[str, List[Path]]\lcheck_figures_list(fig_list: List[Path], output_figures_folder: Path): List[Path]\lreset_figures(log: LogPredDict, file_manager: FileManager, delete_figures: bool, verbose: Union[int, bool, None]): None\lshow_figures(fig_list: List[Union[str, Path]]): None\lupdate_figures(figure_file: StrPath, file_manager: FileManager, log: LogPredDict, timestamp: Optional[str], overwrite: Union[str, bool], verbose: Union[int, bool, None]): Path\l}", shape="record", style="solid"];
"DNNLikelihood.base.FileManager" [color="black", fontcolor="black", label="{FileManager|_input_file : Optional[StrPath]\l_output_folder : Optional[StrPath]\lallowed_objects : list\lallowed_types : Union\linput_file : Path\linput_folder : Path\linput_h5_file : Path\linput_log_file : Path\lname\lobj_name : str\loutput_figures_base_file_name\loutput_figures_base_file_path : Path\loutput_figures_folder : Path\loutput_folder : NoneType, Path\loutput_h5_file : Path\loutput_json_file : Path\loutput_log_file : Path\loutput_predictions_json_file : Path\ltimestamp\l|__define_base_input_files_folder(verbose: Optional[IntBool]): None\l__define_base_output_files_folder(timestamp: Optional[str], verbose: Optional[IntBool]): None\l__define_predictions_files(): None\l__init__(name: Union[str, None], input_file: Optional[StrPath], output_folder: Optional[StrPath], verbose: Optional[IntBool]): None\l__load()\lcheck_create_folder(folder_path: StrPath): Path\lcheck_delete_all_files_in_path(folder_path: StrPath): None\lcheck_delete_all_folders_in_path(folder_path: StrPath): None\lcheck_delete_all_items_in_path(folder_path: StrPath): None\lcheck_delete_files_folders(paths: List[Path]): None\lcheck_rename_path(from_path: StrPath, timestamp: Optional[str], verbose: Optional[IntBool]): Path\lcopy_and_save_folder(from_path: StrPath, to_path: StrPath, timestamp: Optional[str], verbose: Union[int, bool, None]): None\lgenerate_dump_file_name(filepath: StrPath, timestamp: Optional[str]): Path\lget_parent_path(this_path: StrPath, level: int): Path\lget_target_file_overwrite(input_file: StrPath, timestamp: Optional[str], overwrite: Union[str, bool], verbose: Union[int, bool, None]): Path\lprint_save_info(filename: StrPath, time: str, extension_string: Union[str, None], overwrite: Union[str, bool], verbose: Union[int, bool, None]): None\lreplace_strings_in_file(filename: StrPath, old_strings: str, new_string: str): None\lsave_h5(dict_to_save: Dict, log: LogPredDict, overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_json(dict_to_save: Dict, log: LogPredDict, overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_log(log: LogPredDict, overwrite: StrBool, verbose: Optional[IntBool]): None\l}", shape="record", style="solid"];
"DNNLikelihood.histfactory.HistFactoryFileManager" [color="black", fontcolor="black", label="{HistFactoryFileManager|_workspace_folder : Path, NoneType\lbkg_files_base_name\lobj_name : str\lpatch_files_base_name : str\lregions_folders_base_name : str\lworkspace_folder : Path\l|__check_workspace_folder(verbose: Optional[Union[int, bool]]): None\l__import_patch(bg_only_file: Path, patch_file: Path): List[Dict]\l__init__(name: Optional[str], workspace_folder: Optional[str], regions_folders_base_name: str, bkg_files_base_name: str, patch_files_base_name: str, input_file: Optional[str], output_folder: Optional[str], verbose: Optional[Union[int, bool]]): None\l__load(obj: 'Histfactory', verbose: Optional[IntBool]): None\l}", shape="record", style="solid"];
"DNNLikelihood.histfactory.Histfactory" [color="black", fontcolor="black", label="{Histfactory|bkg_files_base_name\lexclude_attrs\lfigures\lfile_manager\llikelihoods_dict : dict, Dict[int, Dict[str, Any]]\llog : dict, Dict\lname : str\lpatch_files_base_name\lpredictions\lregions : dict, Dict[str, Path]\lregions_folders_base_name\l|__build_likelihoods_dict(verbose: Optional[IntBool]): None\l__init__(file_manager: HistFactoryFileManager, verbose: IntBool): None\l__load(verbose: Optional[IntBool]): None\lget_likelihood_object(lik_number: Optional[int], output_folder: Optional[StrPath], verbose: Optional[Union[int, bool]]): Lik\limport_likelihoods(lik_list: Optional[List], progressbar: bool, verbose: Optional[Union[int, bool]]): None\lsave(lik_list: Optional[List], overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_log(overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_object(lik_list: Optional[list], overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_predictions_json(overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\l}", shape="record", style="solid"];
"DNNLikelihood.histfactory.HistfactoryPredictions" [color="black", fontcolor="black", label="{HistfactoryPredictions|\l|__init__(obj_name: str, figures, verbose): None\l}", shape="record", style="solid"];
"DNNLikelihood.base.InputFileNotFoundError" [color="black", fontcolor="red", label="{InputFileNotFoundError|\l|}", shape="record", style="solid"];
"DNNLikelihood.base.InvalidPredictions" [color="black", fontcolor="red", label="{InvalidPredictions|\l|}", shape="record", style="solid"];
"DNNLikelihood.likelihood.Lik" [color="black", fontcolor="black", label="{Lik|exclude_attrs\lfigures\lfile_manager\llog : Dict, dict\llogpdf\lname : str\lparameters\lpredictions\l|__init__(file_manager: LikFileManager, logpdf: LogPDF, parameters: LikParsManager, verbose: IntBool): None\l__load(verbose: Optional[IntBool]): None\lcompute_maximum_logpdf(pars_init, pars_bounds, optimizer, minimization_options, timestamp, save, overwrite, verbose)\lcompute_profiled_maxima_logpdf(pars, pars_ranges, pars_init, pars_bounds, spacing, optimizer, minimization_options, progressbar, timestamp, save, overwrite, verbose)\llogpdf_fn(x_pars: Array, logpdf_args: Optional[list], logpdf_kwargs: Optional[Dict[str, Any]]): Union[float, npt.NDArray]\lplot_logpdf_par(pars, npoints, pars_init, pars_labels, title_fontsize, show_plot, timestamp, save, overwrite, verbose)\lplot_tmu_1d(timestamp_tmu, pars_labels, title_fontsize, show_plot, timestamp, save, overwrite, verbose)\lsave(overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_log(overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_object(overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_predictions_json(overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\lsave_script(timestamp: Optional[str], overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\l}", shape="record", style="solid"];
"DNNLikelihood.likelihood.LikFileManager" [color="black", fontcolor="black", label="{LikFileManager|obj_name : str\lscript_file : Path\l|__define_lik_script_file(): None\l__init__(name: Union[str, None], input_file: Optional[StrPath], output_folder: Optional[StrPath], verbose: Optional[IntBool]): None\l__load(obj: 'Lik', verbose: Optional[IntBool]): None\lsave_script(str_to_save: str, log: LogPredDict, overwrite: StrBool, verbose: Optional[Union[int, bool]]): None\l}", shape="record", style="solid"];
"DNNLikelihood.likelihood.LikParsManager" [color="black", fontcolor="black", label="{LikParsManager|\l|__init__(pars_central: Optional[Array], pars_pos_poi: Optional[ArrayInt], pars_pos_nuis: Optional[ArrayInt], pars_labels: Optional[ArrayStr], pars_bounds: Optional[Array], logpdf: Optional[LogPDF], verbose: Optional[IntBool]): None\l}", shape="record", style="solid"];
"DNNLikelihood.likelihood.LikPredictions" [color="black", fontcolor="black", label="{LikPredictions|\l|__init__(obj_name: str, verbose): None\l}", shape="record", style="solid"];
"DNNLikelihood.base.LogPDF" [color="black", fontcolor="black", label="{LogPDF|\l|__init__(logpdf, logpdf_args: Optional[List], logpdf_kwargs: Union[Dict, None]): None\l}", shape="record", style="solid"];
"DNNLikelihood.base.Name" [color="black", fontcolor="black", label="{Name|_name : Optional[str]\lname : NoneType, str\lobj_name : str\l|__check_define_name(): str\l__init__(obj_name: str, name: Optional[str]): None\l}", shape="record", style="solid"];
"DNNLikelihood.base.ParsManager" [color="black", fontcolor="black", label="{ParsManager|_logpds : Optional[LogPDF]\l_pars_bounds : Optional[Array]\l_pars_central : Optional[Array]\l_pars_labels : Optional[ArrayStr]\l_pars_pos_nuis : Optional[ArrayInt]\l_pars_pos_poi : Optional[ArrayInt]\lallowed_objects : list\lallowed_types : Union\lndims\lobj_name : str\lpars_bounds : ndarray\lpars_central : ndarray\lpars_labels : list\lpars_labels_auto : list\lpars_pos_nuis : ndarray\lpars_pos_poi : ndarray\l|__check_define_pars(ndims: Optional[int], verbose: Optional[IntBool]): None\l__check_get_ndims(logpdf: Optional[LogPDF]): Optional[int]\l__get_pars_labels_auto(pars_pos_poi: ArrayInt, pars_pos_nuis: ArrayInt): List[str]\l__init__(pars_central: Optional[Array], pars_pos_poi: Optional[ArrayInt], pars_pos_nuis: Optional[ArrayInt], pars_labels: Optional[ArrayStr], pars_bounds: Optional[Array], logpdf: Optional[LogPDF], verbose: Optional[IntBool]): None\l__set_pars_labels(pars_labels: Union[str, list]): Union[str, list]\l}", shape="record", style="solid"];
"DNNLikelihood.base.Plots" [color="black", fontcolor="black", label="{Plots|\l|__init__(verbose: Union[int, bool, None]): None\lsavefig(figure_path: StrPath)\l}", shape="record", style="solid"];
"DNNLikelihood.base.Predictions" [color="black", fontcolor="black", label="{Predictions|allowed_attrs : Dict[str, List[str]]\lallowed_objects : List[str]\lallowed_types : Union\lbayesian_inference : Dict\lfrequentist_inference : Dict\lgelman_rubin : Dict\llogpdf_max : Dict\llogpdf_profiled_max : Dict\lmodel_evaluation : Dict\lobj_name : str\l|__init__(obj_name: str, verbose: Union[int, bool, None]): None\linit_predictions(verbose: Optional[Union[int, bool]]): None\lreset_predictions(log: LogPredDict, verbose: Optional[Union[int, bool]]): None\lvalidate_predictions(): None\l}", shape="record", style="solid"];
"DNNLikelihood.resources.Resources" [color="black", fontcolor="black", label="{Resources|active_gpus : list\lavailable_cpu : list\lavailable_gpus\lgpu_mode : bool\l|check_tf_gpu(verbose)\lget_available_cpu(verbose)\lget_available_gpus(verbose)\lset_gpus(gpus_list, verbose)\lset_gpus_env(gpus_list, verbose)\l}", shape="record", style="solid"];
"DNNLikelihood.show_prints.Verbosity" [color="black", fontcolor="black", label="{Verbosity|verbose : bool\l|__init__(verbose: Optional[IntBool]): None\lset_verbosity(verbose: Optional[IntBool]): list[IntBool]\l}", shape="record", style="solid"];
"DNNLikelihood.base._FunctionWrapper" [color="black", fontcolor="black", label="{_FunctionWrapper|args : NoneType, list\lf : Callable\lkwargs : NoneType, dict\l|__call__(x: Union[List, npt.NDArray[Any]]): Union[float, npt.NDArray[Any]]\l__init__(f: Callable, args: Optional[List], kwargs: Optional[Dict[str, Any]]): None\l}", shape="record", style="solid"];
"DNNLikelihood.base.Figures" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.base.FileManager" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.base.LogPDF" -> "DNNLikelihood.base._FunctionWrapper" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.base.ParsManager" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.base.Plots" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.base.Predictions" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.histfactory.HistFactoryFileManager" -> "DNNLikelihood.base.FileManager" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.histfactory.Histfactory" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.histfactory.HistfactoryPredictions" -> "DNNLikelihood.base.Predictions" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.likelihood.Lik" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.likelihood.LikFileManager" -> "DNNLikelihood.base.FileManager" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.likelihood.LikParsManager" -> "DNNLikelihood.base.ParsManager" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.likelihood.LikPredictions" -> "DNNLikelihood.base.Predictions" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.resources.Resources" -> "DNNLikelihood.show_prints.Verbosity" [arrowhead="empty", arrowtail="none"];
"DNNLikelihood.base.Figures" -> "DNNLikelihood.histfactory.Histfactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="figures", style="solid"];
"DNNLikelihood.base.Figures" -> "DNNLikelihood.likelihood.Lik" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="figures", style="solid"];
"DNNLikelihood.base.LogPDF" -> "DNNLikelihood.likelihood.Lik" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logpdf", style="solid"];
"DNNLikelihood.base.Name" -> "DNNLikelihood.base.FileManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"DNNLikelihood.histfactory.HistFactoryFileManager" -> "DNNLikelihood.histfactory.Histfactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file_manager", style="solid"];
"DNNLikelihood.histfactory.HistfactoryPredictions" -> "DNNLikelihood.histfactory.Histfactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="predictions", style="solid"];
"DNNLikelihood.likelihood.LikFileManager" -> "DNNLikelihood.likelihood.Lik" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file_manager", style="solid"];
"DNNLikelihood.likelihood.LikParsManager" -> "DNNLikelihood.likelihood.Lik" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"DNNLikelihood.likelihood.LikPredictions" -> "DNNLikelihood.likelihood.Lik" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="predictions", style="solid"];
}
